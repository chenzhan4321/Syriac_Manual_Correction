{"ast":null,"code":"var _jsxFileName = \"/Users/zhanchen/Library/CloudStorage/Dropbox/Projects/Syriac_Manual/frontend/src/components/ParagraphUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nfunction ParagraphUpload({\n  setParagraphId,\n  setParagraph\n}) {\n  _s();\n  const [text, setText] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('/api/upload', {\n        text\n      });\n      setParagraphId(response.data.id);\n      setParagraph(text);\n    } catch (error) {\n      console.error('Error uploading paragraph:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Enter Syriac paragraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(ParagraphUpload, \"M8VhbSOru85VOsk7T2j5DvKRp+M=\");\n_c = ParagraphUpload;\nexport default ParagraphUpload;\nvar _c;\n$RefreshReg$(_c, \"ParagraphUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","ParagraphUpload","setParagraphId","setParagraph","_s","text","setText","handleSubmit","e","preventDefault","response","post","data","id","error","console","onSubmit","children","value","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/zhanchen/Library/CloudStorage/Dropbox/Projects/Syriac_Manual/frontend/src/components/ParagraphUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\nfunction ParagraphUpload({ setParagraphId, setParagraph }) {\n  const [text, setText] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('/api/upload', { text });\n      setParagraphId(response.data.id);\n      setParagraph(text);\n    } catch (error) {\n      console.error('Error uploading paragraph:', error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <textarea\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        placeholder=\"Enter Syriac paragraph\"\n      />\n      <button type=\"submit\">Upload</button>\n    </form>\n  );\n}\n\nexport default ParagraphUpload;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAExE,SAASC,eAAeA,CAAC;EAAEC,cAAc;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACzD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMc,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,aAAa,EAAE;QAAEN;MAAK,CAAC,CAAC;MAC1DH,cAAc,CAACQ,QAAQ,CAACE,IAAI,CAACC,EAAE,CAAC;MAChCV,YAAY,CAACE,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAED,oBACElB,OAAA;IAAMoB,QAAQ,EAAET,YAAa;IAAAU,QAAA,gBAC3BrB,OAAA;MACEsB,KAAK,EAAEb,IAAK;MACZc,QAAQ,EAAGX,CAAC,IAAKF,OAAO,CAACE,CAAC,CAACY,MAAM,CAACF,KAAK,CAAE;MACzCG,WAAW,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,eACF7B,OAAA;MAAQ8B,IAAI,EAAC,QAAQ;MAAAT,QAAA,EAAC;IAAM;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEX;AAACrB,EAAA,CAxBQH,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AA0BxB,eAAeA,eAAe;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}